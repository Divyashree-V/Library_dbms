create or replace trigger trig_s_books_dues
after update of actualreturndate on s_books_history
for each row
DECLARE
v_count_f number;
v_count_s number;
BEGIN
If (to_date(:new.actualreturndate,'DD-MON-YYYY')=to_date(sysdate,'DD-MON-YYYY') and (:old.duedate is NOT NULL)) then
update students set dues=dues + 2*(FLOOR(:new.actualreturndate-:old.duedate)) where studentno=:OLD.studentno;
insert_dues('S',:OLD.studentno,sysdate,2*(FLOOR(:new.actualreturndate-:old.duedate)));
End if;
END;

create or replace trigger trig_f_books_dues
after update of actualreturndate on f_books_history
for each row
DECLARE
v_count number;
BEGIN
If (to_date(:new.actualreturndate,'DD-MON-YYYY')=to_date(sysdate,'DD-MON-YYYY') and (:old.duedate is NOT NULL)) then
update faculty set dues=dues + 2*(FLOOR(:new.actualreturndate-:old.duedate)) where facultyno=:OLD.facultyno;
insert_dues('F',:OLD.facultyno,sysdate,2*(FLOOR(:new.actualreturndate-:old.duedate)));
End if;
END;

create or replace procedure proc_clear_books_waitlist(
v_isbn varchar2
)
IS
v_count_f number;
v_count_s number;
v_id varchar2(50);
BEGIN
select count(*) into v_count_f from queue_books where ISBN=v_isbn and patron_type='F';
select count(*) into v_count_s from queue_books where ISBN=v_isbn and patron_type='S';
if v_count_f>0 then
    select patron_id into v_id from queue_books where ISBN=v_isbn and patron_type='F' and waitlist_no=1;
    delete from queue_books where patron_type='F' and isbn=v_isbn and waitlist_no=(
    select min(waitlist_no) from queue_books where isbn=v_isbn and patron_type='F') ;
    update queue_books set waitlist_no=waitlist_no-1 where isbn=v_isbn and patron_type='F';

    insert into f_books_history values(v_id,v_isbn,sysdate,sysdate+30,NULL);
    insert into notifications values('F',v_id,'You have been issued the book: '||v_isbn);
elsif v_count_s>0 then
    select patron_id into v_id from queue_books where ISBN=v_isbn and patron_type='S' and waitlist_no=1;
    delete from queue_books where patron_type='S' and isbn=v_isbn and waitlist_no=(
    select min(waitlist_no) from queue_books where isbn=v_isbn and patron_type='S') ;
    update queue_books set waitlist_no=waitlist_no-1 where isbn=v_isbn and patron_type='S';

    insert into s_books_history values(v_id,v_isbn,sysdate,sysdate+30,NULL);
    insert into notifications values('S',v_id,'You have been issued the book: '||v_isbn);
End if; 
END;


create or replace procedure insert_dues(
patron IN varchar2,
id IN varchar2,
trans_date date,
amount number
)
IS
BEGIN
insert into dues values(patron,id,trans_date,amount);
END;


create or replace procedure proc_stud_checkout_books(
v_studentno varchar2,
v_isbn varchar2,
v_checkoutdate date,
v_duedate date,
v_reserved varchar2,
v_booktype varchar2,
v_e_p varchar2
)
IS
cursor cur1 is select courseid from courses where student_enrolled=v_studentno;
v_chk_course number:=0;
c_cid_student courses.courseid%type;
v_cid_book varchar2(100);
hoursdiff number;
ex_fourhours EXCEPTION;
ex_twoweeks EXCEPTION;
ex_course EXCEPTION;
BEGIN
    hoursdiff:=(v_duedate - v_checkoutdate)*24;
        dbms_output.put_line(hoursdiff);
If ((v_booktype='Electronic and Physical') and (v_e_p='Electronic')) then
    insert into s_books_history values(v_studentno,v_isbn,v_checkoutdate,NULL,NULL);
else
If v_booktype='Electronic' then
    insert into s_books_history values(v_studentno,v_isbn,v_checkoutdate,NULL,NULL);
else
    If v_reserved='Yes' then       
        If hoursdiff <= 4 then
            select courseid into v_cid_book from books where isbn=v_isbn;
            open cur1;
                loop
                    fetch cur1 into c_cid_student;
                    exit when cur1%NOTFOUND;
                    if (v_cid_book=c_cid_student) then
                    insert into s_books_history values(v_studentno,v_isbn,v_checkoutdate,v_duedate,NULL);
                    update books set number_of_copies=number_of_copies - 1 where isbn=v_isbn;
                    v_chk_course:=1;
                    EXIT;
                    end if;
                end loop;
            close cur1;
            if (v_chk_course=0) then
                RAISE ex_course;
            end if;
        else
            RAISE ex_fourhours;
        End if;
    else
        If ceil(v_duedate - v_checkoutdate)<=14 then
            insert into s_books_history values(v_studentno,v_isbn,v_checkoutdate,v_duedate,NULL);
            update books set number_of_copies=number_of_copies - 1 where isbn=v_isbn;
        else
            RAISE ex_twoweeks;
        End if;
    End if;
End if; 
End if;
EXCEPTION
When ex_twoweeks then
raise_application_error (-20001,'You cant checkout for more than two weeks');
When ex_fourhours then
raise_application_error (-20001,'You cant checkout a RESERVED for more than four hours');
When ex_course then
raise_application_error (-20001,'This is a reserved book for the course you are not enrolled in.');
END;

create or replace procedure proc_fac_checkout_books(
v_facultyno varchar2,
v_isbn varchar2,
v_checkoutdate date,
v_duedate date,
v_reserved varchar2,
v_booktype varchar2,
v_e_p varchar2
)
IS
hoursdiff number;
ex_fourhours EXCEPTION;
ex_twoweeks EXCEPTION;
BEGIN
    hoursdiff:=(v_duedate - v_checkoutdate)*24;
        dbms_output.put_line(hoursdiff);
If ((v_booktype='Electronic and Physical') and (v_e_p='Electronic')) then
    insert into s_books_history values(v_facultyno,v_isbn,v_checkoutdate,NULL,NULL);
else
    If v_booktype='Electronic' then
    insert into f_books_history values(v_facultyno,v_isbn,v_checkoutdate,NULL,NULL);
    else
    If v_reserved='Yes' then       
        If hoursdiff <= 4 then
            dbms_output.put_line(((to_date(v_duedate,'dd-mon-yyyy hh24:mi:ss') - to_date(v_checkoutdate,'dd-mon-yyyy hh24:mi:ss'))*24));
insert into f_books_history values(v_facultyno,v_isbn,v_checkoutdate,v_duedate,NULL);
update books set number_of_copies=number_of_copies - 1 where isbn=v_isbn;
        else
            RAISE ex_fourhours;
        End if;
    else
        If ceil(v_duedate - v_checkoutdate)<=30 then
            insert into f_books_history values(v_facultyno,v_isbn,v_checkoutdate,v_duedate,NULL);
            update books set number_of_copies=number_of_copies - 1 where isbn=v_isbn;
        else
            RAISE ex_twoweeks;
        End if;
    End if;
End if;
End if; 
EXCEPTION
When ex_twoweeks then
raise_application_error (-20001,'You cant checkout for more than two weeks');
When ex_fourhours then
raise_application_error (-20001,'You cant checkout a RESERVED for more than four hours');
END;

create or replace procedure proc_fac_reserve_books(
v_facultyno varchar2,
v_isbn varchar2,
v_reservedate date,
v_duedate date,
v_booktype varchar2
)
IS
hoursdiff number;
ex_electronic EXCEPTION;
ex_fourmonths EXCEPTION;
BEGIN
    hoursdiff:=(v_duedate - v_reservedate)*24;
If v_booktype='Electronic' then
    RAISE ex_electronic;
else
        If ceil(v_duedate - v_reservedate)<=120 then
            insert into f_books_reserve values(v_facultyno,v_isbn,v_reservedate,v_duedate,NULL);
            update books set reserved='Yes' where isbn=v_isbn;
        else
            RAISE ex_fourmonths;
        End if;
End if; 
EXCEPTION
When ex_fourmonths then
raise_application_error (-20001,'You cant RESERVE a book for more than 4 months');
When ex_electronic then
raise_application_error (-20001,'You cant RESERVE an electronic copy');
END;

create or replace procedure proc_stud_return_books(
v_studentno varchar2,
v_isbn varchar2
)
IS
v_count_ebook number:=0;
v_count_hard number:=0;
v_count_queue number:=0;
BEGIN
select count(*) into v_count_ebook from s_books_history where isbn=v_isbn and duedate is NULL and studentno=v_studentno;
select count(*) into v_count_hard from s_books_history where isbn=v_isbn and duedate is NOT NULL and actualreturndate is NULL and studentno=v_studentno;
select count(*) into v_count_queue from queue_books where isbn=v_isbn;
update s_books_history 
set actualreturndate=sysdate 
where studentno=v_studentno and 
isbn=v_isbn and 
actualreturndate is NULL;
if ((v_count_ebook=0 OR v_count_hard>0) and (v_count_queue=0)) then
update books 
set number_of_copies=number_of_copies + 1 
where ISBN=v_ISBN;
End if;
END;

create or replace procedure proc_fac_return_books(
v_facultyno varchar2,
v_isbn varchar2
)
IS
v_count_ebook number:=0;
v_count_hard number:=0;
v_count_queue number:=0;
BEGIN
select count(*) into v_count_ebook from f_books_history where isbn=v_isbn and duedate is NULL and facultyno=v_facultyno;
select count(*) into v_count_hard from f_books_history where isbn=v_isbn and duedate is NOT NULL and actualreturndate is NULL and facultyno=v_facultyno;
select count(*) into v_count_queue from queue_books where isbn=v_isbn;
update f_books_history 
set actualreturndate=sysdate 
where facultyno=v_facultyno and 
isbn=v_isbn and 
actualreturndate is NULL;
if (v_count_ebook=0 OR v_count_hard>0) then
update books 
set number_of_copies=number_of_copies + 1 
where ISBN=v_ISBN;
End if;
END;

create or replace procedure proc_fac_unreserve_books(
v_facultyno varchar2,
v_isbn varchar2
)
IS
BEGIN
update f_books_reserve 
set actualreturndate=sysdate 
where facultyno=v_facultyno and 
isbn=v_isbn and 
actualreturndate is NULL;
update books 
set reserved='No'
where ISBN=v_ISBN;
END;

create or replace procedure proc_stud_renew_books(
v_studentno varchar2,
v_isbn varchar2,
v_duedate date
)
IS
v_reserved varchar2(50);
v_booktype varchar2(50);
BEGIN
update s_books_history 
set actualreturndate=sysdate 
where studentno=v_studentno and 
isbn=v_isbn and 
actualreturndate is NULL;
select reserved,booktype into v_reserved,v_booktype from books where isbn=v_isbn;
proc_stud_checkout_books(v_studentno,v_isbn,sysdate,v_duedate ,v_reserved ,v_booktype,NULL);
END;

create or replace procedure proc_fac_renew_books(
v_facultyno varchar2,
v_isbn varchar2,
v_duedate date
)
IS
v_reserved varchar2(50);
v_booktype varchar2(50);
BEGIN
update f_books_history 
set actualreturndate=sysdate 
where facultyno=v_facultyno and 
isbn=v_isbn and 
actualreturndate is NULL;
select reserved,booktype into v_reserved,v_booktype from books where isbn=v_isbn;
proc_fac_checkout_books(v_facultyno,v_isbn,sysdate,v_duedate ,v_reserved ,v_booktype,NULL);
END;



//Procedure for bookswaitlist
create or replace procedure proc_queue_books(
v_patron_type varchar2,
v_patron_id varchar2,
v_isbn varchar2
)
IS
v_max number:=0;
BEGIN
if (v_patron_type='S') then
    select max(waitlist_no) into v_max from queue_books where isbn=v_isbn and  patron_type='S';
    if v_max>0 then
        insert into queue_books values(v_patron_type,v_patron_id,v_isbn,v_max+1);
    else
        insert into queue_books values(v_patron_type,v_patron_id,v_isbn,1);
    end if;
elsif (v_patron_type='F') then
    select max(waitlist_no) into v_max from queue_books where isbn=v_isbn and  patron_type='F';
    if v_max>0 then
        insert into queue_books values(v_patron_type,v_patron_id,v_isbn,v_max+1);
    else
        insert into queue_books values(v_patron_type,v_patron_id,v_isbn,1);
    end if;
End If;
END; 


//procedure to update STUDENT PROFILE
create or replace procedure proc_stud_update_profile(
v_name varchar2,
v_password varchar2,
v_phone number,
v_altphone number,
v_address varchar2,
v_dob date,
v_sex varchar2,
v_nationality varchar2,
v_department varchar2,
v_degree varchar2,
v_category varchar2,
v_classification varchar2,
v_studentno varchar2
)
IS
ex_degree EXCEPTION;
ex_date EXCEPTION;
BEGIN
If ((v_classification='Undergraduate' and (v_degree='MS' or v_degree='MA' or v_degree='PhD')) 
OR (v_classification='Postgraduate' and (v_degree='MS' or v_degree='MA' or v_degree='BS'))
OR (v_classification='Graduate' and (v_degree='BS' or v_degree='PhD'))) 
then
raise ex_degree;
End if;
update students
set
name=v_name,
password=v_password ,
phone=v_phone ,
altphone=v_altphone,
address=v_address ,
dob=v_dob,
sex=v_sex ,
nationality=v_nationality ,
department=v_department ,
degree=v_degree ,
category=v_category ,
classification=v_classification 
where studentno=v_studentno;
EXCEPTION
WHEN ex_date THEN
raise_application_error (-20001,'Check your age.');
WHEN ex_degree THEN
raise_application_error (-20001,'Select the correct combination of degree and classification.');
END;

//procedure to update faculty profile
create or replace procedure proc_fac_update_profile(
v_name varchar2,
v_password varchar2,
v_nationality varchar2,
v_department varchar2,
v_course_taught varchar2,
v_category varchar2,
v_facultyno varchar2
)
IS
BEGIN
update faculty
set
name=v_name,
password=v_password ,
nationality=v_nationality ,
department=v_department ,
category=v_category ,
course_taught=v_course_taught
where facultyno=v_facultyno;
END;



create or replace procedure issue_camera(
v_studentno varchar2,
v_CAMERAID varchar2,
v_checkoutdate date
)
IS
BEGIN
insert into s_camera_history values(v_studentno,v_CAMERAID,v_checkoutdate,NULL,NULL,'H');
dbms_output.put_line('test');
END;

create or replace procedure checkout_camera(
v_studentno varchar2,
v_CAMERAID varchar2,
v_checkoutdate date
)
IS
due_date date;
BEGIN
due_date:=v_checkoutdate+6;    
update s_camera_history set status='C',duedate=due_date where studentno=v_studentno and camera_name=v_CAMERAID;
END;

create or replace procedure return_camera(
v_studentno varchar2,
v_CAMERAID varchar2
)
IS
BEGIN    
update s_camera_history set actualreturndate=sysdate, status='A' where studentno=v_studentno and camera_name=v_CAMERAID;
END;

create or replace procedure proc_clear_dues(
v_patron_type varchar2,
v_patron_id varchar2
)
IS
c_dues number(5);
BEGIN
if v_patron_type='S' then
select dues into c_dues from students where studentno=v_patron_id;
update students
set dues=0 where studentno=v_patron_id;
elsif v_patron_type='F' then
select dues into c_dues from faculty where facultyno=v_patron_id;
update faculty
set dues=0 where facultyno=v_patron_id;
End if;
insert into dues values(v_patron_type,v_patron_id,sysdate,-1*c_dues);
END;

create or replace procedure proc_check_hold(
v_patron_type varchar2,
v_patron_id varchar2
)
IS
c_datediff number;
ex_hold EXCEPTION;
BEGIN
select sysdate-min(transaction_date) into c_datediff from dues where patron_id=v_patron_id and patron_type=v_patron_type and amount>0 and transaction_date>(select nvl(max(transaction_date),to_date('01-JAN-2000 00:00:00','DD-MON-YYYY hh24:mi:ss')) from dues where patron_id=v_patron_id and patron_type=v_patron_type and amount<0);
If c_datediff>90 then
RAISE ex_hold;
End if;
EXCEPTION
When ex_hold then
raise_application_error (-20001,'Your account has been put on hold since you have not cleared the dues for 90 days. Please clear the dues first.');
END;